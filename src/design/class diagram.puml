@startuml
package app {

  class Main {
    - static final String USER
    - static final String PASSWORD
    - static final String URL
    - static final String DB
    - static ConnectionPool connectionPool
    + static void main(String[] args)

  }


  package controllers {
    class AccountController{
    + static void addRoutes(Javalin app, ConnectionPool connectionPool)
    + static void login(Context ctx, ConnectionPool connectionPool)
    + static void logout(Context ctx)
    + static void createAccount(Context ctx, ConnectionPool connectionPool)
    + static void salesrepShowAllCustomersPage(Context ctx, ConnectionPool connectionPool)
    + static void salesrepShowCustomerPage(Context ctx, ConnectionPool connectionPool)


      }
    class OrderController{
    + static void addRoutes(Javalin app, ConnectionPool connectionPool)
    + static void postCarportCustomerInfo(Context ctx, ConnectionPool connectionPool)
    - static void showThankYouPage(Context ctx, ConnectionPool connectionPool)
    + static void salesrepShowAllOrdersPage(Context ctx, ConnectionPool connectionPool)
    + static void salesrepShowOrderPage(Context ctx, ConnectionPool connectionPool)
    + static void customerShowOrderPage(Context ctx, ConnectionPool connectionPool)
    + static void salesrepPostCalculation(Context ctx, ConnectionPool connectionPool)
    }
  }

  package persistence {
    class AccountMapper{
      + static Account login(Context ctx, ConnectionPool connectionPool)
      + static int(accountId) createAccount(Context ctx, ConnectionPool connectionPool)
      + static Account getAccountById(Context ctx, ConnectionPool connectionPool)
      + static List<Account> getAllAccounts(Context ctx, ConnectionPool connectionPool)
      + static boolean updatePassword(Context ctx, ConnectionPool connectionPool)
      + static boolean updateEmail(Context ctx, ConnectionPool connectionPool)
    }
    class OrderMapper{
    + static boolean createOrder(int carportWidth, int carportLength,(rest of caport info), Context ctx, ConnectionPool connectionPool)
    + static OrderAccountDto getOrderAccountDtoByOrderId(int orderId, Context ctx, ConnectionPool connectionPool)
    + static List<OrderAccountDto> getAllOrderAccountDto(Context ctx, ConnectionPool connectionPool)
    + TAG STILLING IMORGEN: static updateOrder(Context ctx, ConnectionPool connectionPool)
    + static boolean updateOrderStatus(String status, Context ctx, ConnectionPool connectionPool)
    + static List<Order> getAllOrdersByAccountId(int accountId, Context ctx, ConnectionPool connectionPool)
    }
    class ItemMapper{

    }
  }

  package Services{
  package svgEngine {
  class SVG{
  }
  }
  package Calculator{
  class calculaterEngien{

  }

  }
  }

  package entities{
     class Account{
        - int accountId
        - String name
        - String address
        - String zip
        - String phone
        - String email
        - String role
        + Account()
        + Getters()
     }

     class Order {
             -int orderId
             -int accountId
             -Date datePlaced
             -Date dateCompleted
             -String status
             -boolean paid
             -Date datePaid
             -double sale_price
             -int carportLengthCm
             -int carportWidthCm
             -int carportHeightCm
             -int shedLengthCm
             -int shedWidthCm
             +Order()
             +Getters()
         }
'     class Orderlines {
'         - int orderNumber
'         - int cupcakeId
'         - int quantity
'         + OrderLines(int orderNumber, int cupcakeId, int quantity)
'         + int getOrderNumber()
'         + int getCupcakeId()
'         + int getQuantity()
'         + calculateSubtotal(Cupcake cupcake)
'         + toString()
'         }

  }

  package dto {

    class OrderAccountDto {
       - int orderId
       - String name
       - String address
       - String zip
       - String city
       - String phone
       - String email
       - int carportWidthCm
       - int carportLengthCm
       - int shedWidthCm
       - int shedLengthCm
       + OrderAccountDto((with shed))
       + OrderAccountDto((without shed))
       }

  }

  package exceptions {

  class DatabaseException{
  }

  }


    Main --> controllers : uses

    AccountController --> AccountMapper : uses
    OrderController --> OrderMapper : uses
    OrderMapper --> OrderAccountDto

    AccountMapper --> entities : uses
    OrderMapper --> entities : uses

    persistence -->  exceptions : uses

    Calculator --> svgEngine : carport object

    svgEngine --> OrderController : svg String

    Calculator <--> ItemMapper

    OrderController --> Services : carport info


}
@enduml